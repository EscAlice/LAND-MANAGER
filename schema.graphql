type Parcel @entity {
  id: ID!
  tokenId: BigInt! # we store ID in hex and in uint256. This helps with interacting with the contract and dapp
  x: BigInt!
  y: BigInt!

  owner: Bytes
  owners: [Owner!] @derivedFrom(field: "parcel")

  operators: [Operator!] @derivedFrom(field: "parcel")
  operator: Bytes

  updateOperator: Bytes
  updateOperators: [UpdateOperator!] @derivedFrom(field: "parcel")

  estate: Estate
  estates: [EstateHistory!] @derivedFrom(field: "parcel")

  updatedAt: BigInt
}

type EstateHistory @entity {
  id: ID!
  _prevEstateId: String
  estateId: String
  parcel: Parcel!
  createdAt: BigInt!
}

type Estate @entity {
  id: ID!

  owner: Bytes!
  owners: [Owner!] @derivedFrom(field: "estate")

  operators: [Operator!] @derivedFrom(field: "estate")
  operator: Bytes

  updateOperator: Bytes
  updateOperators: [UpdateOperator!] @derivedFrom(field: "estate")

  size: Int
  parcels: [Parcel!]

  createdAt: BigInt
  updatedAt: BigInt
}

type Authorization @entity {
  id: ID!
  type: String!
  tokenAddress: Bytes!
  owner: Bytes!
  operator: Bytes!
  isApproved: Boolean!
  timestamp: BigInt!
  createdAt: BigInt!
}

type Owner @entity {
  id: ID!
  address: Bytes
  parcel: Parcel
  estate: Estate
  eventName: String!
  timestamp: BigInt!
  createdAt: BigInt!
}

type Operator @entity {
  id: ID!
  address: Bytes
  parcel: Parcel
  estate: Estate
  eventName: String!
  timestamp: BigInt!
  createdAt: BigInt!
}

type UpdateOperator @entity {
  id: ID!
  address: Bytes
  parcel: Parcel
  estate: Estate
  eventName: String!
  timestamp: BigInt!
  createdAt: BigInt!
}
